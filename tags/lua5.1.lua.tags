# format=pipe                                                                                                               #
# Funciones Internas de Lua 5.1 - 18 July 2018 - creado por Díaz Urbaneja Víctor Eduardo Diex <diaz.victor@openmailbox.org> #
# Basada en la documentacione de Lua 5.1 page : https://www.lua.org/manual/5.1/es/manual.html                               #
# Guardar como lua5.1.lua.tags en el direcctorio de configuracion de Geany, y lo va a autocargar al abrir un archivo .lua   #
# Si lo Guarda en otro direcctorio lo debe cargar desde Geany asi  Herramientas --> Cargar archivo de etiquetas             #
#############################################################################################################################
ayuda|Funciones Internas de Lua 5.1 - 18 July 2018                                     - creado por Díaz Urbaneja Víctor Eduardo Diex <diaz.victor@openmailbox.org>  - Basada en la documentacion de Lua 5.1 page : https://www.lua.org/manual/5.1/es/manual.html - Guardar como lua5.1.lua.tags en el direcctorio de configuracion de Geany, y lo va a autocargar al abrir un archivo .lua                                        - Si lo Guarda en otro direcctorio lo debe cargar desde                         Geany asi, Herramientas --> Cargar archivo de etiquetas. |()|
assert|Activa un error cuando el valor de su argumento v es falso (por ejemplo, nil o false); en otro caso retorna todos sus argumentos. mensaje es un mensaje de error; cuando está ausente se utiliza por defecto "assertion failed!". |(v [, mensaje])
collectgarbage|Esta función es una interface genérica al liberador de memoria. Realiza diversas funciones de acuerdo a su primer argumento, opt.                                "stop", detiene el liberador de memoria. "restart", reinicia el liberador de memoria. "collect", realiza un ciclo completo de liberación de memoria. "count", devuelve la memoria total en uso por Lua (en Kbytes). "step", realiza un paso de liberación de memoria. El "tamaño" del paso se controla por arg (valores grandes significan más pasos) de una manera no especificada. Si se desea controlar el tamaño del paso se debe afinar experimentalmente el valor de arg. Devuelve true si el paso acaba un ciclo de liberación. "steppause", establece arg/100 como el nuevo valor para la pausa del liberador. "setstepmul", establece arg/100 como el nuevo valor para el multiplicador del paso del liberador.|(opt [, arg])|
dofile|Abre el fichero con el nombre dado y ejecuta su contenido como un chunk de Lua.	 Cuando se invoca sin argumentos, dofile ejecuta el contenido de la entrada estándar (stdin). Devuelve todos los valores retornados por el chunk.                    En caso de error, dofile propaga el error a su invocador (esto es, dofile no se ejecuta en modo protegido).|(filename)|
error|Termina la última función protegida llamada, estableciendo mensaje como mensaje de error. La función error nunca retorna.                                                                                                                      Normalmente error añade, al comienzo del mensaje, cierta información acerca de la posición del error. El argumento nivel especifica cómo obtener la posición del error. Con nivel 1 (por defecto) la posición del error es donde fue invocada la función error. Nivel 2 apunta el error hacia el lugar en que fue invocada la función que llamó a error; y así sucesivamente. Pasar un valor 0 como nivel evita la adición de la información de la posición al mensaje.|(mensaje [, nivel])|
_G|Una variable global (no una función) que almacena el entorno global (o sea, _G._G es igual a _G). Lua mismo no usa esta variable; cambiar su valor no afecta ningún entorno, ni viceversa. (Úsese setfenv para cambiar entornos.)||
getfenv|Retorna el entorno actualmente en uso por la función. f puede ser una función Lua o un número que especifica la función a ese nivel de la pila, nivel 1 es la función que invoca a getfenv. Si la función dada no es una función Lua o si f es 0, getfenv retorna el entorno global. El valor por defecto de f es 1.|([f])|
getmetatable|Si objeto no tiene una metatabla devuelve nil. En otro caso, si la metatabla del objeto tiene un campo "__metatable" retorna el valor asociado, o si no es así retorna la metatabla del objeto dado.|(objeto)|
ipairs|Retorna tres valores de una función iteradora, la tabla t, y 0, de tal modo que la construcción                                                                                                                                                for i,v in ipairs(t) do                                                              bloque                                                                     end                                                                                                                                                             iterará sobre los pares (1,t[1]), (2,t[2]), ···, hasta la primera clave entera con un valor nil en la tabla.|(t)|
load|Carga un chunk usando la función func para obtener sus partes. Cada llamada a func debe retornar un string que se concatena con los resultados previos. Un retorno de nil (o no valor) señala el final del chunk. Si no hay errores retorna el chunk compilado como una función; en otro caso retorna nil más un mensaje de error. El entorno de la función retornada es el global. nombre_de_chunk se utiliza para identificar el chunk en los mensajes de error y para información de depuración.|(func [, nombre_de_chunk])|
loadfile|Similar a load, pero obtiene el chunk del fichero nombre_de_fichero o de la entrada estándar si no se proporciona un nombre.|([nombre_de_fichero])|
loadstring|Similar a load, pero obtiene el chunk del string proporcionado. Para cargar y ejecutar un string dado úsese                                                                                                                                           assert(loadstring(s))()                                                                                                                                         Cuando está ausente, nombre_de_chunk toma por defecto el string dado.|(string [, nombre_de_chunk])|
next|    Permite al programa recorrer todos los campos de una tabla. Su primer argumento es una tabla y su segundo argumento es un índice en esta tabla. next retorna el siguiente índice de la tabla y su valor asociado. Cuando se invoca con nil como segundo argumento next retorna un índice inicial y su valor asociado. Cuando se invoca con el último índice o con nil en una tabla vacía next retorna nil. Si el segundo argumento está ausente entonces se interpreta como nil. En particular se puede usar next(t) para comprobar si una tabla está vacía.                     El orden en que se enumeran los índices no está especificado, incluso para índices numéricos. (Para recorrer una tabla en orden numérico úsese el for numérico o la función ipairs.) El comportamiento de next es indefinido si durante el recorrido se asigna un valor a un campo no existente previamente en la tabla. No obstante se pueden modificar campos existentes. En particular se pueden borrar campos existentes.|(t [, indice)|
pairs|Retorna tres valores, la función next, la tabla t, y nil, por lo que la construcción                                                                                 for k,v in pairs(t) do                                                              bloque                                                                      end                                                                                                                                                             iterará sobre todas las parejas clave-valor de la tabla t. Véase next para las precauciones a tomar cuando se modifica la tabla durante las iteraciones.      |(t)|
pcall|Invoca la función f con los argumentos dados en modo protegido. Esto significa que ningún error dentro de f se propaga; en su lugar pcall captura el error y retorna un código de estatus. Su primer resultado es el código de estatus (booleano), el cual es verdadero si la llamada tiene éxito sin errores. En ese caso pcall también devuelve todos los resultados de la llamada después del primer resultado. En caso de error pcall retorna false más un mensaje de error.|(f, arg1, ···)|
print|Recibe cualquier número de argumentos e imprime sus valores en el fichero estándar de salida (stdout), usando tostring como función para convertir los argumentos a strings. print no está diseñada para salida formateada sino sólo como una manera rápida de mostrar valores, típicamente para la depuración del código. Para salida formateada úsese string.format.|(···)|
rawequal|Verifica si v1 es igual a v2, sin invocar ningún metamétodo. Devuelve un booleano.|(v1, v2)|
rawget|Obtiene el valor real de tabla[índice] sin invocar ningún metamétodo. tabla debe ser una tabla e índice cualquier valor diferente de nil.|(tabla, indice)|
rawset|Asigna valor a tabla[índice] sin invocar ningún metamétodo. tabla debe ser una tabla, índice cualquier valor diferente de nil y valor un valor cualquiera de Lua.|(tabla, indice, valor)|
select|Si índice es un número retorna todos los argumentos después del número índice. En otro caso índice debe ser el string "#", y select retorna el número total de argumentos extra que recibe.|(indice, ···)|
setfenv|Establece el entorno que va a ser usado por una función. f puede ser una función Lua o un número  que especifica la función al nivel de pila, nivel 1 es la función que invoca a setfenv. setfenv retorna la función dada.                                                                                                         Como caso especial, cuando f es 0 setfenv cambia el entorno del proceso que está en ejecución. En este caso setfenv no retorna valores.|(f, tabla)|
setmetatable|Establece la metatabla de una tabla dada. (No se puede cambiar la metatabla de otros tipos desde Lua, sino sólo desde C.) Si metatabla es nil entonces se elimina la metatabla de la tabla dada. Si la metatabla original tiene un campo "__metatable" se activa un error.                                                             Esta función retorna tabla.|(tabla, metatabla)|
tonumber|Intenta convertir su argumento en un número. Si el argumento es ya un número o un string convertible a un número entonces tonumber retorna este número; en otro caso devuelve nil.                                                                                                                                              Un argumento opcional especifica la base para interpretar el número. La base puede ser cualquier entero entre 2 y 36, ambos inclusive. En bases por encima de 10 la letra 'A' (en mayúscula o minúscula) representa 10, 'B' representa 11, y así sucesivamente, con 'Z' representando 35. En base 10 (por defecto), el número puede tener parte decimal, así como un exponente opcional. En otras bases sólo se aceptan enteros sin signo.|(e [, base])|
tostring|Recibe un argumento de cualquier tipo y lo convierte en un string con un formato razonable. Para un control completo de cómo se convierten los números, úsese string.format.                                                                                                                                                  Si la metatabla de e tiene un campo "__tostring" entonces tostring invoca al correspondiente valor con e como argumento y usa el resultado de la llamada como su propio resultado.|(e)|
type|Retorna el tipo de su único argumento, codificado como string. Los posibles resultados de esta función son "nil" (un string, no el valor nil), "number", "string", "boolean, "table", "function", "thread" y "userdata".|(v)|
unpack|Retorna los elementos de una tabla dada. Esta función equivale a                                                                                                return lista[i], lista[i+1], ···, lista[j]                                                                                                                   excepto que este código puede ser escrito sólo para un número fijo de elementos. Por defecto i es 1 y j es la longitud de la lista, como se define a través del operador longitud. |(lista [, i [, j]])|
_VERSION|Una variable global (no una función) que almacena un string que contiene la versión actual del intérprete. En esta versión de Lua el contenido actual de esta variable es "Lua 5.1".||
xpcall|Esta función es similar a pcall, excepto que se puede establecer un manejador de error.                                                                                                                                                          xpcall invoca a la función f en modo protegido, usando err como manejador de error. Ningún error dentro de f se propaga; en su lugar xpcall captura el error, llamando a la función err con el objeto de error original, y retorna un código de estatus. Su primer resultado es el código de estatus (un booleano), que es verdadero si la llamada tiene éxito sin errores. En ese caso xpcall también devuelve todos los resultados de la llamada después del primer resultado. En caso de error xpcall retorna false más el resultado de err.|(f, err)|
coroutine|Las operaciones relacionadas con co-rutinas comprenden una sub-biblioteca de la biblioteca básica y se sitúa en la tabla coroutine. Manejo de co-routines||
create|Crea una nueva co-rutina con cuerpo f. f debe ser una función Lua. Retorna una nueva co-rutina, un objeto de tipo "thread".coroutine|(f)|
resume|Comienza o continúa la ejecución de la co-rutina co. La primera vez que se llama a esta función la co-rutina                                                                                                                                    comienza ejecutando su cuerpo. Los valores val1, ··· se pasan como argumentos al cuerpo de la función. Si la co-rutina ha cedido el control del flujo, resume la reinicia; los valores val1, ··· son pasados como resultados de la cesión.                                                                                 Si la co-rutina se ejecuta sin error resume retorna true más los valores pasados a yield (si la co-rutina realiza la cesión) o los valores retornados por el cuerpo de la función (si la co-rutina acaba). Si existe cualquier error resume retorna false más un mensaje de error. coroutine|(co [, val1, ···])|
running|Retorna la co-rutina en ejecución o nil cuando se invoca desde el proceso principal. coroutine||
status|Retorna el estatus de la co-rutina co como un string, "running", si la co-rutina está en ejecución (esto es, invocó a status); "suspended", si la co-rutina está suspendida en una llamada a yield, o si todavía no ha comenzado a ejecutarse; "normal" si la co-rutina está activa pero no ejecutándose (esto es, si ha resumido otra co-rutina); y "dead" si la co-rutina ha finalizado su función o si se ha detenido con un error. coroutine|(co)|
wrap|Crea una nueva co-rutina con cuerpo f. f debe ser una función Lua. Retorna una función que resume la co-rutina cada vez que es invocada. Cualquier argumento pasado a la función se comporta como un argumento extra para resume. Retorna los mismos valores devueltos por resume, excepto el primer booleano. En caso de error, éste se propaga. coroutine|(f)|
yield|Suspende la ejecución de la co-rutina invocante. La co-rutina no puede estar ejecutando una función C, un metamétodo o un iterador. Cualquier argumento de yield es pasado como resultado extra a resume. coroutine|(···)|
module|Crea un módulo. Si existe una tabla en package.loaded[nombre] ésta es el módulo. En otro caso si existe una tabla global t con el nombre dado ésta es el módulo. Sino, finalmente, crea una nueva tabla t y le da el nombre global de nombre y el valor de package.loaded[nombre]. Esta función también inicializa t._NAME con el nombre dado, t._M con el módulo (t mismo), y t._PACKAGE con el nombre del paquete (el módulo nombre completo menos su último componente; véase más abajo). Para acabar, module establece t como nuevo entorno de la función actual y el nuevo valor de package.loaded[nombre], de tal manera que require retorna t.                 Si nombre es un nombre compuesto (esto es, uno con componentes separados por puntos) module crea (o reutiliza, si ya existen) tablas para cada componente. Por ejemplo, si nombre es a.b.c, entonces module almacena la tabla módulo en el campo c del campo b de la tabla global a.|(nombre [, ···])|
require|    Carga el módulo dado. La función comienza buscando en la tabla package.loaded para determinar si nombre está ya cargado. Si es así entonces require devuelve el valor almacenado en package.loaded[nombre]. En otro caso intenta encontrar un cargador para el módulo.                                                           Una vez que se encontró el cargador, require lo invoca con un único argumento, nombre. Si el cargador retorna un valor, require lo asigna a package.loaded[nombre].     Si el cargador no retorna un valor y no está asignado un valor a package.loaded[nombre], entonces require asigna true a esta entrada. En cualquier caso, require retorna el valor final de package.loaded[nombre].                                           Si existen errores durante la carga o ejecución del módulo en proceso o si no se pudo encontrar un cargador para el módulo, entonces require activa un error. |(filename)|
package|La biblioteca de empaquetado proporciona utilidades básicas para cargar y construir módulos en Lua. Exporta dos de sus funciones directamente al entorno global, module y require. Las demás se exportan en la tabla package.||
cpath|El camino de búsqueda usado por require para buscar un cargador en C.                                                                                           Lua inicializa este camino package.cpath de la misma manera en que inicializa el camino de Lua package.path, usando la variable de entorno LUA_CPATH (además de otro camino por defecto definido en luaconf.h). package||
loaded|Una tabla usada por require para controlar qué módulos están ya cargados. Cuando se solicita un módulo nombre y package.loaded[nombre] no es falso, require simplemente retorna el valor almacenado. package||
loaders|Una tabla usada por require que controla cómo se cargan los módulos.           Cada entrada en esta tabla es una función buscadora. Cuando busca un módulo, require llama a cada uno de esas buscadoras en orden ascendente, con el nombre del módulo (el argumento pasado a require) com único argumento. La función puede retornar otra función (el módulo cargador o un string que explica que no encontró ese módulo (o nil si no tuvo nada que decir). Lua inicializa esta tabla con cuatro funciones. La primera buscadora simplemente busca un cargador en la tabla package.preload. La segunda buscadora busca un cargador como biblioteca de Lua, usando el camino de búsqueda. guardado en package.path. La tercera buscadora busca un cargador como biblioteca de C, usando el camino dado en la variable package.cpath.            La cuarta buscadora intenta un cargador todo-en-uno. package||
loadlib|Enlaza dinámicamente el programa anfitrión con la biblioteca en C nombre_de_biblio. Dentro de esta biblioteca busca una función nombre_de_func y la retorna como una función C. (Por tanto, nombre_de_func debe seguir el protocolo; véase lua_CFunction). Ésta es una función de bajo nivel. Se salta completamente el sistema de paquetes y de módulos. A diferencia de require, no realiza ninguna búsqueda en el camino y no añade automáticamente extensiones. nombre_de_biblio debe ser un nombre completo de fichero de la biblioteca en C, incluyendo si es necesario el camino completo y la extensión. nombre_de_func debe ser el nombre exacto exportado por la biblioteca en C (el cual puede depender del compilador de C y del cargador del sistema operativo usados). Esta función no está soportada por el C ANSI. Por tanto sólo está disponible en algunas plataformas (Windows, Linux, Mac OS X, además de otros sistemas Unix que soportan el estándar dlfcn). package|(nombre_de_biblioteca, nombre_de_func)|
path|El camino de búsqueda usado por require para buscar un cargador de Lua.                                                                                         Al comienzo Lua inicializa esta variable con el valor de la variable de entorno LUA_PATH o con un camino por defecto definido en luaconf.h, si la variable de entorno no está definida. Si aparece ";;" en el valor de la variable de entorno se reemplaza por el camino por defecto. package||
preload|Una tabla que almacena cargadores para módulos específicos (véase require). package||
seeall|Establece una metatabla para módulo con su campo __index refiriéndose al entorno global, de tal manera que este módulo hereda los valores del entorno global. Se usa como una opción para la función module. package|(modulo)|
string|Esta biblioteca proporciona funciones genéricas de manejo de strings, tales como encontrar y extraer substrings y detectar patrones. Cuando se indexa un string en Lua el primer carácter está en la posición 1 (no en 0 como en C). Se permite el uso de índices negativos que se interpretan como indexado hacia atrás, desde el final del string. Por tanto el último carácter del string está en la posición -1, y así sucesivamente.                                                                                                                                       La biblioteca de strings proporciona todas sus funciones en la tabla string. También establece una metatabla para string donde el campo __index apunta a la misma metatabla. Por tanto, se pueden usar las funciones de manejo de string en un estilo orientado a objetos. Por ejemplo, string.byte(s, i) puede ponerse s.byte(i). Manejo de string||
byte|Devuelve los códigos numéricos internos de los caracteres s[i], s[i+1], ···, s[j]. El valor por defecto de i es 1; el valor por defecto de j es i.                                                                                           Téngase en cuenta que los códigos numéricos no son necesariamente portables de unas plataformas a otras. string|(s [, i [, j]])|
char|Recibe cero o más enteros. Devuelve un string con igual longitud que el número de argumentos, en el que cada carácter tiene un código numérico interno igual a su correspondiente argumento.                                                                                                                                 Téngase en cuenta que los códigos numéricos no son necesariamente portables de unas plataformas a otras. string|(···)|
dump|Devuelve un string que contiene la representación binaria de la función dada, de tal manera que una llamada posterior a loadstring con este string devuelve una copia de la función. func debe ser una función Lua sin upvalues. string|(function)|
find|Busca la primera aparición de patrón en el string s. Si la encuentra, find devuelve los índices de s donde comienza y acaba la aparación; en caso contrario retorna nil. Un tercer argumento numérico opcional inicio especifica dónde comenzar la búsqueda; su valor por defecto es 1 y puede ser negativo. Un valor true como cuarto argumento opcional básica desactiva las utilidades de detección de patrones, realizando entonces la función una operación de "búsqueda básica de substring", sin caracteres "mágicos" en el patrón. Téngase en cuenta que si se proporciona el argumento básica también debe proporcionarse el argumento inicio.                                                                                                       Si el patrón tiene capturas entonces en una detección con éxito se devuelven los valores capturados, después de los dos índices.                           string|(s, patron [, inicio [, basica]])|
format|Devuelve una versión formateada de sus argumentos (en número variable) siguiendo la descripción dada en su primer argumento (formato, que debe ser un string). El string de formato sigue las mismas reglas que la familia de funciones C estándar printf. Las únicas diferencias son que las opciones/modificadores *, l, L, n, p, y h no están soportadas, y que existe una opción extra q. Esta última opción da formato a un string en una forma adecuada para ser leída de manera segura de nuevo por el intérprete de Lua el string es escrito entre dobles comillas, y todas las dobles comillas, nuevas líneas, ceros y barras inversas del string se sustituyen por las secuencias de escape adecuadas en la escritura. Por ejemplo, la llamada string.format('%q', 'un string con "comillas" y \n nueva línea') producirá el string.                                                                         "un string con \"comillas\" y \      nueva línea". string|(formato, ···)|
gmath|Devuelve una función iteradora que, cada vez que se invoca, retorna las siguientes capturas del patrón en el string s. nota, no entro mucha documentacion, ya sera en versiones superiores a al Geany 1.33 ya que tiene un limite de caracteres. string|(s, patron)|
gsub|Devuelve una copia de s en la que todas (o las n primeras, si se especifica el argumento opcional) las apariciones del patrón han sido reemplazadas por el reemplazamiento especificado, que puede ser un string, una tabla o una función. gsub también devuelve, como segundo valor, el número total de coincidencias detectadas. string|(s, patron, reemplazamiento [, n])|
len|Recibe un string y devuelve su longitud. El string vacío "" tiene longitud 0. Los caracteres cero dentro del string también se cuentan, por lo que "a\000bc\000" tiene longitud 5. nota, no entro mucha documentacion, ya sera en versiones superiores a al Geany 1.33 ya que tiene un limite de caracteres. string|(s)|
lower|Recibe un string y devuelve una copia del mismo con todas las letras mayúsculas cambiadas a minúsculas. El resto de los caracteres permanece sin cambios. La definición de letra mayúscula depende del sistema local. string|(s)|
match|Busca la primera aparición del patrón en el string s. Si encuentra una, entonces match retorna la captura del patrón; en caso contrario devuelve nil. Si el patrón no produce ninguna captura entonces se devuelve la coincidencia completa. Un tercer y opcional argumento numérico inicio especifica dónde comenzar la búsqueda; su valor por defecto es 1 y puede ser negativo. string|(s, patron [, inicio])|
rep|Devuelve un string que es la concatenación de n copias del string s. string|(s, n)|
reverse|Devuelve un string que es el original s invertido. string|(s)|
sub|Retorna el substring de s que comienza en i y continúa hasta j; i y j pueden ser negativos. Si j está ausente entonces se asume que vale -1 (equivalente a la longitud del string). En particular, la llamada string.sub(s,1,j) retorna un prefijo de s con longitud j, y string.sub(s, -i) retorna un sufijo de s con longitud i. string|(s, i [, j])|
upper|Recibe un string y devuelve una copia del mismo con todas las letras minúsculas cambiadas a mayúsculas. El resto de los caracteres permanece sin cambios. La definición de letra minúscula depende del sistema local. string|(s)|
table|Esta biblioteca proporciona funciones genéricas para manejo de tablas. Todas estas funciones están definidas dentro de la tabla table.                                                                                                            La mayoría de las funciones en la biblioteca de tablas asume que las mismas representan arrays o listas (o sea, están indexadas numéricamente). Para estas funciones, cuando hablamos de la "longitud" de una tabla queremos decir el resultado del operador longitud (#). Madejo de tablas||
concat|Dado  una  table  donde  todos  sus  elementos  son  strings  o  números  devuelve tabla[i]..separador..tabla[i+1] ··· separador..tabla[j]. El valor por defecto de separador es el string vacío, el valor por defecto de i es 1 y el valor por defecto de j es la longitud de la tabla. Si i es mayor que j, la función devuelve un string vacío. table|(tabla [, separador [, i [, j]]])|
insert|Inserta el elemento valor en la posición dada en la tabla, desplazando hacia adelante otros elementos para abrir hueco, si es necesario. El valor por defecto de posición es n+1, donde n es igual a #tabla es la longitud de la tabla , de tal manera que table.insert(t,x) inserta x al final de la tabla t.table|(tabla, [posicion,] valor)|
maxn|Devuelve el mayor índice numérico positivo de una tabla dada o cero si la tabla no tiene índices numéricos positivos. (Para hacer su trabajo esta función realiza un barrido lineal de la tabla completa.)table|(tabla)|
remove|Elimina de tabla el elemento situado en la posición dada, desplazando hacia atrás otros elementos para cerrar espacio, si es necesario. Devuelve el valor del elemento eliminado. El valor por defecto de posición es n, donde n es la longitud de la tabla, por lo que la llamada table.remove(t) elimina el último elemento de la tabla t. table|(tabla [, posicion])|
sort|Ordena los elementos de la tabla en un orden dado modificando la propia tabla, desde table[1] hasta table[n], donde n es la longitud de la tabla. Si se proporciona el argumento comparador éste debe ser una función que recibe dos elementos de la tabla y devuelve verdadero cuando el primero es menor que el segundo (por lo que not comparador(a[i+1],a[i]) será verdadero después de la ordenación). Si no se proporciona una función comparador entonces se usa el operador estándar < de Lua.                                                                                 El algoritmo de ordenación no es estable; esto es, los elementos considerados iguales por la ordenación dada pueden sufrir cambios de orden relativos después de la ordenación.table|(tabla [, comparador])|
math|Esta biblioteca es una interface a la biblioteca matemática estándar de C. Proporciona todas sus funciones dentro de la tabla math. Funciones matematicas||
abs|Devuelve el valor absoluto de x. math|(x)|
acos|Devuelve el arco coseno de x (en radianes). math|(x)|
asin|Devuelve el arco seno de x (en radianes). math|(x)|
atan|Devuelve el arco tangente de x (en radianes). math|(x)|
atan2|Devuelve el arco tangente de y/x (en radianes), pero usa los signos de ambos argumentos para determinar el cuadrante del resultado. (También maneja correctamente el caso en que x es cero.) math|(y, x)|
ceil|Devuelve el menor entero mayor o igual que x. math|(x)|
cos|Devuelve el coseno de x (se asume que está en radianes). math|(x)|
cosh|Devuelve el coseno hiperbólico de x. math|(x)|
deg|Devuelve en grados sexagesimales el valor de x (dado en radianes). math|(x)|
exp|Devuelve el valor de e^x . math|(x)|
floor|Devuelve el mayor entero menor o igual que x. math|(x)|
fmod|Devuelve el resto de la división de x por y. math|(x, y)|
frexp|Devuelve m y e tales que x es igual a m 2^e , e es un entero y el valor absoluto de m está en el intervalo [0.5, 1) (o cero cuando x es cero). math|(x)|
huge|El valor HUGE_VAL, un valor más grande o igual que otro valor numérico cualquiera. math||
ldexp|Devuelve m 2^e (e debe ser un entero). math|(m, e)|
log|Devuelve el logaritmo natural de x. math|(x)|
log10|Devuelve el logaritmo decimal (base 10) de x. math|(x)|
max|Devuelve el mayor valor de entre sus argumentos. math|(x, ···)|
min|Devuelve el menor valor de entre sus argumentos. math|(x, ···)|
modf|Devuelve dos números, las partes entera y fraccional de x . math|(x)|
pi|El valor de pi. math|||||
pow|Devuelve x^y . (Se puede también usar la expresión x^y para calcular este valor.) math|(x, y)|
rad|Devuelve en radianes el valor del ángulo x (dado en grados sexagesimales). math|(x)|
random|Esta función es un interface a rand, generador simple de números pseudo-aleatorios proporcionado por el ANSI C. (Sin garantías de sus propiedades estadísticas.)                                                                                 Cuando se invoca sin argumentos devuelve un número pseudoaleatorio real uniforme en el rango [0,1). Cuando se invoca con un número entero m, math.random devuelve un número pseudoaleatorio entero uniforme en el rango [1, m]. Cuando se invoca con dos argumentos m y n enteros, math.random devuelve un número pseudoaleatorio entero uniforme en el rango [m, n]. math|([m [, n]])|
randomseed|Establece x como "semilla" para el generador de números pseudoaleatorios, iguales semillas producen iguales secuencias de números. math|(x)|
sin|Devuelve el seno de x (se asume que está en radianes). math|(x)|
sinh|Devuelve el seno hiperbólico de x. math|(x)|
sqrt|Devuelve la raiz cuadrada de x. (Se puede usar también la expresión x^0.5 para calcular este valor.) math|(x)|
tan|Devuelve la tangente de x (se asume que está en radianes). math|(x)|
tanh|Devuelve la tangente hiperbólica de x. math|(x)|
io|La biblioteca de entrada/salida (I/O de sus siglas en inglés) proporciona dos estilos diferentes de manejo de ficheros. El primero de ellos usa descriptores de fichero implícitos; esto es, existen dos ficheros por defecto, uno de entrada y otro de salida, y las operaciones se realizan sobre éstos. El segundo estilo usa descriptores de fichero explícitos. Utilidades de entrada/salida||
close|Equivalente a descriptor_de_fichero.close(). Sin argumento cierra el fichero de salida por defecto. io|([descriptor_de_fichero])|
flush|Equivalente a descriptor_de_fichero.flush aplicado al fichero de salida por defecto. io||
open|Esta función abre un fichero, en el modo especificado en el string mode. Devuelve un descriptor de fichero o,en caso de error, nil además de un mensaje de error. El string que indica modo puede ser uno de los siguientes. "r", modo lectura (por defecto); "w", modo escritura; "a", modo adición; "r+", modo actualización, todos los datos preexistentes se mantienen; "w+", modo actualización, todos los datos preexistentes se borran; "a+", modo adición con actualización, todos los datos preexistentes se mantienen, y la escritura se permite sólo al final del fichero. El string que indica el modo puede contener también 'b' al final, lo que es necesario en algunos sistema espara abrir el fichero en modo binario. Este string es exactamente el que se usa en la función estándar de C fopen.                               io|(nombre_de_fichero [, modo])|
input|Cuando se invoca con un nombre de fichero entonces lo abre (en modo texto), y establece su manejador de fichero como fichero de entrada por defecto. Cuando se llama con un descriptor de fichero simplemente lo establece como manejador para el fichero de entrada por defecto. Cuando se invoca sin argumento devuelve el fichero por defecto actual.                                                        En caso de errores esta función activa error en lugar de devolver un código de error. io|([descriptor_de_fichero, nombre_de_fichero])|
lines|Abre el fichero de nombre dado en modo lectura y devuelve una función iteradora que, cada vez que es invocada, devuelve una nueva línea del fichero. io|([nombre_de_fichero])|
output|Similar a io.input, pero operando sobre el fichero por defecto de salida.        io|([descriptor_de_fichero, nombre_de_fichero])|
popen|Comienza a ejecutar el programa prog en un proceso separado y retorna un descriptor de fichero que se puede usar para leer datos que escribe prog (si modo es "r", el valor por defecto) o para escribir datos que lee prog (si modo es "w").                                                                                         Esta función depende del sistema operativo y no está disponible en todas las plataformas. io|(prog [, modo])|
read|Equivalente a io.input().read. io|(···)|
tmpfile|Devuelve un descriptor de fichero para un fichero temporal. Éste se abre en modo actualización y se elimina automáticamente cuando acaba el programa. io||
type|Verifica si objeto es un descriptor válido de fichero. Devuelve el string "file" si objeto es un descriptor de fichero abierto, "closed file" si objeto es un descriptor de fichero cerrado, o nil si objeto no es un descriptor de fichero. io|(objeto)|
write|Equivalente a io.output().write. io|(···)|
seek|Establece (o solicita) la posición actual (del puntero de lectura/escritura) en el descriptor_de_fichero  file|([de_donde] [, desplazamiento])|
setvbuf|Establece un modo buffer para un fichero de salida. El argumento modo puede ser uno de estos tres. "no", sin buffer; el resultado de cualquier operación de salida se produce inmediatamente. "full", con buffer completo; la operación de salida se realiza sólo cuando el buffer está lleno o cuando se invoca explícitamente la función flush en el descriptor del fichero. "line", con buffer de línea; la salida se demora hasta que se produce una nueva línea en la salida o existe una entrada de algún fichero especial (como una terminal). Para los dos últimos casos, tamaño especifica el tamaño del buffer, en bytes. El valor por defecto es un tamaño adecuado. file|(modo [, tamaño])|
os|Esta biblioteca está implementada a través de la tabla os. Utilidades del sistema operativo||
clock|Devuelve una aproximación al total de segundos de CPU usados por el programa. os||
date|Devuelve un string o una tabla conteniendo la fecha y hora, formateada de acuerdo con el string dado en formato. os|([formato [, tiempo]])|
difftime|evuelve el número de segundos desde el instante t1 hasta el t2. En POSIX, Windows y algunos otros sistemas este valor es exactamente t2-t1. os|(t2, t1)|
execute|Esta función equivale a la función system de C. Pasa la orden comando para que sea ejecutada en el intérprete de comandos del sistema operativo. Devuelve un código de estatus, que es dependiente del sistema. Si el argumento comando está ausente devuelve un valor no cero si está disponible un intérprete de comandos y cero si no está disponible. os|([comando])|
exit|Invoca la función exit de C, con un código entero opcional, para terminar el programa anfitrión. El valor por defecto de código es el valor correspondiente a éxito. os|([codigo])|
getenv|Devuelve el valor asignado a la variable de entorno variable, o nil si la variable no está definida. os|(variable)|
remove|Elimina el fichero o directorio dado. Los directorios deben estar vacíos para poder ser eliminados. Si la función falla retorna nil, más un string describiendo el error. os|(nombre_de_fichero)|
rename|Renombra un fichero o directorio de nombre_viejo a nombre_nuevo. Si la función falla retorna nil, más un string describiendo el error. os|(nombre_viejo, nombre_nuevo)|
setlocale|    Establece valores en el sistema local del programa. local es un string que especifica un valor local; categoría es un string opcional que describe qué categoría cambiar. "all", "collate", "ctype", "monetary", "numeric", or "time"; la categoría por defecto es "all". Esta función retorna el nombre del nuevo local o nil si la petición no pudo ser aceptada.                                                               Si local es el string vacío, el local actual se establece como el local nativo (que depende de la implementación). Si local es el string "C", el local actual se establece en el local estándar de C.                                            Cuando se invoca con nil como primer argumento, esta función retorna sólo el nombre del local actual en la categoría dada. os|(local [, categoria])|
time|    Devuelve el tiempo actual cuando se llama sin argumentos, o un tiempo representando la fecha y hora especificadas en la tabla dada. Ésta debe tener los campos year, month y day, y puede tener los campos hour, min, sec e isdst (para una descripción de esos campos, véase la función os.date).                                        El valor retornado es un número, cuyo significado depende del sistema. En POSIX, Windows y algunos otros sistemas este número cuenta el número de segundos desde alguna fecha inicial dada (la "época"). En otros sistemas el significado no está especificado, y el número retornado por time puede ser usado sólo como argumento de las funciones date y difftime. os|([tabla])|
tmpname|Devuelve un string con un nombre de fichero que puede ser usado como fichero temporal. El fichero debe ser abierto explícitamente antes de su uso y también eliminado explícitamente cuando no se necesite más. os||
debug|Esta biblioteca proporciona a los programas en Lua las funcionalidades de la interface de depuración. Se debe usar con cuidado. Las funciones proporcionadas aquí deben ser usadas exclusivamente para depuración y labores similares, tales como el análisis de código. Por favor, resístase la tentación de usar la biblioteca como una herramienta de programación, puede llegar a ser muy lenta. Además, alguna de sus funciones viola alguna de las asunciones acerca del código en Lua (por ejemplo, que las variables locales de una función no pueden ser accedidas desde fuera de la función o que los userdata no pueden ser cambiados desde el código Lua) y por tanto pueden comprometer código de otra manera seguro. Todas las funciones de esta biblioteca se proporcionan en la tabla debug. La biblioteca de depuración||
debug|Entra en modo interactivo con el usuario, ejecutando cada string que introduce el usuario. Usando comandos simples y otras utilidades de depuración el usuario puede inspeccionar variables globales y locales, cambiar sus valores, evaluar expresiones, etc. Una línea que contiene sólo la palabra cont finaliza esta función, por lo que el programa invocante continúa su ejecución.                              Téngase presente que los comandos para degub.debug no están léxicamente anidados dentro de ninguna función, y no tienen acceso directo a las variables locales. debug|.debug()|
getfenv|Devuelve el entorno del objeto o. debug|(o)|
gethook|Devuelve información sobre el hook actual del proceso, en forma de tres valores, la función del hook actual, la máscara del hook actual y el contador del hook actual (como fue establecida por la función debug.sethook). debug|([proceso])|
getinfo|Devuelve una tabla con información acerca de la función func. Se puede dar la función directamente, o se puede dar un número en el lugar de func, lo que significa la función al nivel de ejecución de la llamada de pila, nivel 0 es el de la función actual (getinfo misma); nivel 1 es la función que llamó a getinfo; y así sucesivamente. Si func es un número mayor que el total de funciones activas entonces getinfo retorna nil.  debug|([proceso,] func [, que])|
getlocal|Esta función devuelve el nombre y el valor de una variable local con índice local de la función al nivel dado de la pila. (El primer argumento o variable local tiene índice 1, y así sucesivamente, hasta la última variable local activa.) La función retorna nil si no existe una variable local con el índice dado, y activa un error cuando se invoca con nivel fuera de rango. (Se puede llamar a debug.getinfo para verificar si el nivel es válido.)                                                                                                                              Los nombres de variable que comienzan con '(' (paréntesis de abrir) representan variables internas (de control de bucles, temporales y locales de funciones C). debug|([proceso,] nivel, local)|
getmetatable|Devuelve la metatabla del objeto dado o nil si éste no tiene metatabla. debug|(objeto)|
getregistry|Retorna la tabla de registro. debug||
getupvalue|Esta función retorna el nombre y el valor del upvalue con índice up de la función func. La función retorna nil si no hay un upvalue con el índice dado.         debug|(func, up)|
setfenv|Establece la tabla de entorno de un objeto dado. debug|(objeto, tabla)|
sethook|Esta función retorna el nombre y el valor del upvalue con índice up de la función func. La función retorna nil si no hay un upvalue con el índice dado. debug|([proceso,] func_hook, máscara[, contador])|
setlocal|Esta función asigna el valor a la variable local con índice local de la función al nivel dado en la pila, retornando el nombre de la variable local. La función retorna nil si no existe una variable local con el índice dado, y activa un error cuando se llama con un nivel fuera de rango. (Se puede invocar getinfo para verificar si el nivel es válido.) debug|([proceso,] nivel, local, valor)|
setmetatable|Establece tabla (que puede ser nil) como la metatabla del objeto dado. debug|(objeto, tabla)|
setupvalue|Esta función asigna el valor al upvalue con índice up de la función func, retornando el nombre del upvalue. La función retorna nil si no existe el upvalue con el índice dado. debug|(func, up, valor)|
traceback|Devuelve un string con el "trazado inverso" de la llamada en la pila. Un mensaje opcional se añade al principio del "trazado inverso". Un número de nivel opcional indica en qué nivel se comienza el "trazado inverso" (por defecto es 1, la función que está invocando a traceback). debug|([proceso,] [mensaje] [, nivel])|
activate|geany|( tab_id )|
appinfo|geany|()|
basename|geany|( pathstr )|
batch|geany|( start )|
byte|geany|( [position] )|
caret|geany|( [position] )|
close|geany|( [filename]|[index] )|
copy|geany|( [content]|[start,stop] )|
count|geany|()|
cut|geany|()|
dirlist|geany|( path )|
dirname|geany|( pathstr )|
documents|geany|( [doc_id] )|
filename|geany|()|
fileinfo|geany|()|
find|geany|( phrase, start, stop, options )|
fullpath|geany|( filename )|
height|geany|()|
keycmd|geany|( command )|
keygrab|geany|( [prompt] )|
launch|geany|( program [, arg1 [, arg2, ...]] )|
length|geany|()|
lines|geany|( [index] )|
match|geany|( [position] )|
navigate|geany|( mode, count [,extend [,rect]] )|
newfile|geany|( [filename] )|
open|geany|( [filename]|[index] )|
optimize|geany|()|
paste|geany|()|
rescan|geany|()|
rowcol|geany|( [position]|[line,column] )|
save|geany|( [filename]|[index] )|
scintilla|geany( msg_id [, wparam [, lparam]] )|
select|geany|( [[start,] stop]] )|
selection|geany|( [content] )|
signal|geany|( widget, signal )|
stat|geany|( filename [, lstat] )|
status|geany|( message )|
text|geany|( [content] )|
timeout|geany|( seconds )|
wkdir|geany|( [folder] )|
word|geany|( [position] )|
xsel|geany|( [text] )|
yield|geany|()|
choose|geany|( prompt, items )|
confirm|geany|( title, question, default )|
input|geany|( [prompt] [,default] )|
message|geany|( [title,] message )|
pickfile|geany|( [mode [,path [,filter]]] )|
wordchars|geany|||||
rectsel|geany|||||
banner|geany|||||
caller|geany|||||
dirsep|geany|||||
project|geany|||||
script|geany|||||
new|keyfile|()|
data|keyfile|( kf [, text] )|
groups|keyfile|( kf )|
keys|keyfile|( kf, group )|
value|keyfile|( kf, group, key [, value] )|
comment|keyfile|( kf, group, key [, comment] )|
has|keyfile|( kf, group [, key] )|
remove|keyfile|( kf, group [, key] )|
new|dialog|( title, buttons )|
run|dialog|( dlg )|
label|dialog|( dlg, text )|
hr|dialog|( dlg )|
heading|dialog|( dlg, text )|
text|dialog|( dlg, key, default, prompt )|
password|dialog|( dlg, key, default, prompt )|
textarea|dialog|( dlg, key, default, caption )|
checkbox|dialog|( dlg, key, default, caption )|
select|dialog|( dlg, key, default, caption )|
option|dialog|( dlg, key, value, label )|
group|dialog|( dlg, key, default, caption )|
radio|dialog|( dlg, key, value, label )|
file|dialog|( dlg, key, default, caption )|
color|dialog|( dlg, key, default, caption )|
font|dialog|( dlg, key, default, caption )|