# Geany's snippets configuration file
#
# use \n or %newline% for a new line (it will be replaced by the used EOL char(s) - LF, CR/LF, CR).
# use \t or %ws% for an indentation step, it will be replaced according to the current document's indent mode.
# use \s to force whitespace at beginning or end of a value ('key= value' won't work, use 'key=\svalue').
# use %key% for all keys defined in the [Special] section.
# use %cursor% to define where the cursor should be placed after completion. You can define multiple
#     %cursor% wildcards and use the "Move cursor in snippet" to jump to the next defined cursor
#     position in the completed snippet.
# You can define a section for each supported filetype to overwrite default settings, the section
# name must match exactly the internal filetype name, run 'geany --ft-names' for a full list.
#
# Additionally, you can use most of the template wildcards like {developer} or {date} in the snippets.
# See the documentation for details.

# filetype names:
# ASM, C, C++, C#, CAML, D, Fortran, FreeBasic, Haskell, Haxe, Java, Pascal, VHDL, Ferite, Javascript,
# Lua, Make, O-Matrix, Perl, PHP, Python, Ruby, Sh, Tcl, CSS, Docbook, HTML, XML, Conf, Diff, LaTeX,
# reStructuredText, SQL, Arduino, None

# special keys to be used in other snippets, cannot be used "standalone"
# can be used by %key%, e.g. %brace_open%
# nesting of special keys is not supported (e.g. brace_open=\n{\n%brace_close% won't work)
# key "wordchars" is very special, it defines the word delimiting characters when looking for
# a word to auto complete, leave commented to use the default wordchars

[Special]
brace_open  = {\n\t
brace_close = }\n
block       = {\n\t%cursor%\n}
block_cursor= {\n\t%cursor%\n}
php_function= function %cursor%($%cursor%) {\n\t%cursor%\n} 
#wordchars=_abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789

# Default is used for all filetypes and keys can be overwritten by [filetype] sections
[Default]

[Fortran]
line=!-----------------------------------------------------------------------
dim=dimension(%cursor%)
dp=double precision
dc=double complex
func=function %cursor%()\n\timplicit none\nend function\n
sub=subroutine %cursor%()\n\timplicit none\nend subroutine
do=do %cursor%\n\t\nend do
int=integer
real=real(dp)
prog=program %cursor%\n\t\nend program
if=if(%cursor%) then\n\t\nendif
imp=implicit none
mod=module %cursor%\n\t\nend module
select=select case (%cursor%)\n\tcase ()\nend select\n

[C++]
do=do\s{\n\t%cursor%\n}\swhile(%cursor%);
main=int main(int argc, char **argv)%block_cursor%
line=/******************************************************************************/

[C]
do=do\s{\n\t%cursor%\n}\swhile(%cursor%);
main=int main(int argc, char **argv)%block_cursor%
std=#include <stdio.h>\n\nint main(int argc, char **argv)%block_cursor%
line=/******************************************************************************/
if=if(%cursor%)%block%
else=else%block%
for=for(i = 0; i < %cursor%; i++)%block%
forj=for(j = 0; j < %cursor%; j++)%block%
fork=for(k = 0; k < %cursor%; k++)%block%
while=while%(%cursor%)%block%
switch=switch(%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
def=#define 
deff=#define %cursor% do {\\\n\t%cursor%\\\n} while(0);
istd=#include <stdio.h>\n
istr=#include <string.h>\n
istl=#include <stdlib.h>\n
ifd=#ifdef %cursor%\n%cursor%\n#endif
ifde=#ifdef %cursor%\n%cursor%\n#else\n%cursor%\n#endif
ifnd=#ifndef %cursor%\n%cursor%\n#endif
ifnde=#ifndef %cursor%\n%cursor%\n#else\n%cursor%\n#endif
delse=#else\n%cursor%\n#endif
defelse=#else\n%cursor%\n#endif

[PHP]
# Little php snippets written by Atanas Beloborodov <nasko@cod3r.org>
# Some php5 object`s usefull snippets
class     = class %cursor% {\n\tpublic function __construct()\s{\t\n\n\t}\n\n\tpublic function __destruct()\s{\t\n\n\t}\n}
interface = interface %cursor% %block%
static    = public static %php_function%
public    = public %php_function%
protected = protected %php_function%
private   = private %php_function%
this      = $this->%cursor%
#Control structures :
for       = for ($i = 0; $i < %cursor%; $i++ %block%
while     = while ($%cursor%) %block%
if        = if ($%cursor%) %block%
else      = else %block%
elif      = if ($%cursor%) %block%else %block%
elseif    = if (%cursor%) {\n\t\n}\nelseif () {\n\t\n}\nelse {\n\t\n}\n
do        = do %block%while (%cursor%);
foreach   = foreach (%cursor%) %block%
# Include methods
# Note : require and include is not functions ! Not required braces ()
req       = require ("%cursor%");
reqo      = require_once ("%cursor%");
inc       = include ("%cursor%");
inco      = include_once ("%cursor%");
# Others :
function  = %php_function%
def       = define ('%cursor%','%cursor%');
throw     = throw new Exception ('%cursor%');
print_r   = print_r($%cursor%)
print     = print "%cursor%"
ec        = echo "%cursor%"
array     = $%cursor% = ['%cursor%'=>'%cursor%']
case      = case %cursor%:\n\t%cursor%\n\tbreak;\n
php       = <?php\n\t%cursor%\t\n?>
do        = do\s{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch    = switch (%cursor%){\ncase %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try                = try%block%\ncatch (%cursor%)%block_cursor%
# Doc
doc                = /**\n * %cursor%\n * %cursor%\n */
doclink            = /**\n * \n * @link %cursor%\n */
docignore          = /**\n * @ignore %cursor%\n */
doctodo            = /**\n * @todo %cursor%\n */
docdep             = /**\n * @deprecated %cursor%\n */
docdeprecated      = /**\n * @deprecated %cursor%\n */
docglobal          = /**\n * \n * @name $%cursor%\n * @global array $GLOBALS['%cursor%'] \n */
docstatic          = /**\n * \n * %cursor%\n * @static \n */
docfunctionexample = /**\n * Example of Function Doc\n * Returns a formatted var_dump for debugging purposes\n * @param string $s string to display\n * @param mixed $v variable to display with var_dump()\n * @param mixed $v,... unlimited OPTIONAL number of additional variables to display with var_dump()\n * @return mixed\n */
docfunction        = /**\n * %cursor%\n * @param %cursor% \n * @return %cursor% \n * @since 1.0.0 \n */
dbfetch            = array_fetch($GLOBALS['queries'],'to_string')

[Python]
utf8               = #-*- coding: utf-8 -*-\n# vim:fileencoding=utf-8
for                = for i in xrange(%cursor%):\n\t%cursor%
doc                =""" %cursor% """\n%cursor%
elif=elif %cursor%:\n\t%cursor%
else=else:\n\t%cursor%
if=if %cursor%:\n\t%cursor%
from=from %cursor% import \n
main=if __name__ == '__main__':\n\t%cursor%
class=class %cursor%(object):\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass
def=def %cursor%(ARG: TYPE) -> TYPE:\n\t"""DOC"""\n\t
get=def get%cursor%(self): return self._var\n
set=def set%cursor%(self): self._var = var\n
try=try:\n\t%cursor%\nexcept Exception, e:\n\t
py=#!/usr/bin/env python3\n#-*- coding:utf-8 -*-\n# vim:fileencoding=utf-8\n
while=while %cursor%:\n\t%cursor%
with=with %cursor%:\n\t
head="""\n\t%cursor%PROJECT - MODULE\n\n\tDESCRIPTION\n\n\t@copyright: {year} by {developer} <{mail}>\n\t@license: GNU GPL, see COPYING for details.\n"""\n
# Django models
# by Tomasz Karbownicki <tomasz@karbownicki.com>
mclass=class %cursor%(models.Model):\n\t'''%cursor%'''\n\n\tdef __unicode__(self):\n\t\treturn self.XXXXX\n\n\tdef get_absolute_url(self):\n\t\treturn "/XXXXX/%s/" % self.slug\n\n\tclass Meta:\n\t\tverbose_name = "%cursor%"\n\t\tverbose_name_plural = "%cursor%"
mchar  = %cursor% = models.CharField(max_length=50, verbose_name=u'%cursor%')
mint   = %cursor% = models.IntegerField(verbose_name=u'%cursor%')
mtext  = %cursor% = models.TextField(verbose_name=u'%cursor%')
mkey   = %cursor% = models.ForeignKey(%cursor%, verbose_name=u'%cursor%')
mimage = %cursor% = models.ImageField(upload_to='', verbose_name=u'%cursor%')
mbool  = %cursor% = models.BooleanField(verbose_name=u'%cursor%')
mdate  = %cursor% = models.DateField(verbose_name=u'%cursor%', help_text='Format daty: 2009-04-28')
memail = %cursor% = models.EmailField(verbose_name=u'%cursor%')
murl   = %cursor% = models.URLField(verbose_name=u'%cursor%')
mslug  = %cursor% = models.SlugField(verbose_name=u'%cursor%', unique=True)
# by Devyn Collier Johnson <DevynCJohnson@Gmail.com>
license = __license__ = """LGPLv3\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n"""
all     = __all__ = [\n\t'FUNC',\n]
debug   = print('HERE')

[Cython]
line=#-----------------------------------------------------------------------
for=for i in range(%cursor%):\n\t
doc=""" %cursor%\n"""\n
elif=elif(%cursor%):\n\t
else=else:\n\t%cursor%
if=if(%cursor%):\n\t
from=from %cursor% import \n
class=class %cursor%(object):\n\t""" Class doc """\n\t\n\tdef __init__ (self):\n\t\t""" Class initialiser """\n\t\tpass
def=def %cursor%(self):\n\t"""\n\t%cursor%\n\t\n\tParameters\n\t----------\n\t%cursor%\n\t\n\tReturns\n\t-------\n\t%cursor%\n\t"""\n\t
get=def get%cursor%(self): return self._var\n
set=def set%cursor%(self): self._var = var\n
.=self.%cursor%
try=try:\n\t%cursor%\nexcept Exception, e:\n\t
py=#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\n%cursor%
while=while(%cursor%):\n\t
with=with %cursor%:\n\t
head="""\n\t%cursor%PROJECT - MODULE\n\n\tDESCRIPTION\n\n\t@copyright: {year} by {developer} <{mail}>\n\t@license: GNU GPL, see COPYING for details.\n"""\n
np=import numpy as np\n
plt=import matplotlib.pyplot as plt

[HTML]
# by Tomasz Karbownicki <tomasz@karbownicki.com>
# top
html5   = <!DOCTYPE html>\n<html lang="es">\n<head>\n\t<meta charset="utf-8" />\n\t<title>Document%cursor%</title>\n</head>\n<body>\n\t%cursor%\n</body>\n</html>
meta    = <meta charset="utf-8" />
html    = <html lang="%cursor%">\n\t%cursor%\n</html>
head    = <head>\n\t%cursor%\n</head>
script  = <script type="text/javascript">\n\t%cursor%\n</script>
src     = <script type="text/javascript" src="%cursor%">%cursor%</script>
style   = <style type="text/css">\n\t%cursor%\n</style>
link    = <link rel="stylesheet" type="text/css" href="%cursor%"/>
rss     = <link rel="alternate" type="application/rss+xml" title="%cursor%" href="%cursor%" />
title   = <title>%cursor%</title>
ie7     = <meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
refresh = <meta http-equiv="refresh" content="2;url=%cursor%" />
body    = <body>\n\t%cursor%\n</body>
center  = <center>%cursor%</center>
# HTML5
header  = <header>%cursor%</header>
nav     = <nav>%cursor%</nav>
section = <section>%cursor%</section>
article = <article>%cursor%</article>
aside   = <aside>%cursor%</aside>
footer  = <footer>%cursor%</footer>
# table
table   = <table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>%cursor%</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>%cursor%</td>\n\t\t</tr>\n\t</tbody>\n</table>
td      = <td>%cursor%</td>
tr      = <tr>%cursor%</tr>
th      = <th>%cursor%</th>
caption = <caption>%cursor%</caption>
# form
form     = <form>\n\t\n</form>
label    = <label for="%cursor%"></label>
input    = <input type="%cursor%" />
textarea = <textarea></textarea>
select   = <select>\n\t\n</select>
option   = <option value="%cursor%">%cursor%</option>
radio    = <input type="radio" />
checkbox = <input type="checkbox" />
button   = <button type="%cursor%">%cursor%</button>
fieldset = <fieldset>\n\t\n</fieldset>
legend   = <legend>%cursor%</legend>
# list
ul       = <ul class="%cursor%">\n\t<li>%cursor%</li>\n</ul>
ol       = <ol class="%cursor%">\n\t<li>%cursor%</li>\n</ol>
li       =<li>%cursor%</li>
dl       =<dl class="%cursor%">\n\t<dt>%cursor%</dt>\n\t<dd>%cursor%</dd>\n</dl>
dt       =<dt>%cursor%</dt>
dd       =<dd>%cursor%</dd>
# inline
a      = <a href="%cursor%">%cursor%</a>
span   = <span>%cursor%</span>
em     = <em>%cursor%</em>
small  = <small>%cursor%</small>
big    = <big>%cursor%</big>
cite   = <cite>%cursor%</cite>
strong = <strong>%cursor%</strong>
img    = <img src="%cursor%" alt="%cursor%" title="%cursor%" />
# block
div  = <div class="%cursor%">%cursor%</div>
h1   = <h1>%cursor%</h1>
h2   = <h2>%cursor%</h2>
h3   = <h3>%cursor%</h3>
h4   = <h4>%cursor%</h4>
h5   = <h5>%cursor%</h5>
h6   = <h6>%cursor%</h6>
p    = <p>%cursor%</p>
pre  = <pre>\n%cursor%\n</pre>
code = <code>%cursor%</code>
prec  = <pre><code>%cursor%</code></pre>
quote = <blockquote>\n\t<p>\n\t\t%cursor%\n\t</p>\n</blockquote>
# other
comment = <!-- %cursor% -->
br   = <br/>
hr   = <hr/>
metav = <meta name="viewport" content="width=device-width, initial-scale=1">

[CSS]
# #by Tomasz Karbownicki <tomasz@karbownicki.com>
box-sizing            = box-sizing: border-box;\n-moz-box-sizing: border-box;\n-webkit-box-sizing: border-box;
border-radius         = border-radius: %cursor%px;\n-moz-border-radius: %cursor%px;\n-ms-border-radius: %cursor%px;\n-o-border-radius: %cursor%px;\n-webkit-border-radius: %cursor%px;
# boder-shadow        = border-shadow: %cursor%px %cursor%px #%cursor% %cursor%px;
comm                  = /* ######### %cursor% ######### */
# Doc
doc                   = /**\n * %cursor%\n * %cursor%\n */
doclink               = /**\n * \n * @link %cursor%\n */
docignore             = /**\n * @ignore %cursor%\n */
doctodo               = /**\n * @todo %cursor%\n */
docdep                = /**\n * @deprecated %cursor%\n */
docdeprecated         = /**\n * @deprecated %cursor%\n */
docglobal             = /**\n * \n * @name $%cursor%\n * @global array $GLOBALS['%cursor%'] \n */
docstatic             = /**\n * \n * %cursor%\n * @static \n */
docfunctionexample    = /**\n * Example of Function Doc\n * Returns a formatted var_dump for debugging purposes\n * @param string $s string to display\n * @param mixed $v variable to display with var_dump()\n * @param mixed $v,... unlimited OPTIONAL number of additional variables to display with var_dump()\n * @return mixed\n */
docfunction           = /**\n * %cursor%\n * @param %cursor% \n * @return %cursor% \n * @since 1.0.0 \n */
dbfetch               = array_fetch($GLOBALS['queries'],'to_string')

[Javascript]
function   = function(){\n\t%cursor%\n}
log        = console.log('%cursor%');
#Jquery
ajax2      = $.ajax({\n\t\turl: '%cursor%',\n\t\tmethod:'POST',\n\t\tdata:{\n\t\t\t\t%cursor%\n\t\t},\n\t\tbeforeSend:function(json){\n\t\t\t\t$("#loadingModal").modal('show');\n\t\t},\n\t\tcomplete:function(xhr,textStatus){\n\t\t\t\t$("#loadingModal").modal('hide');\n\t\t\t\t//xhr.responseText\n\t\t\t\t//xhr.responseJSON\n\t\t},\n\t\tsuccess:function(json,textStatus,xhr){\n\t\t\t\t%cursor%\n\t\t},\n\t\terror:function(xhr,textStatus,errorThrown){\n\t\t\t\tconsole.error({textStatus:textStatus,'xhr.response':xhr.responseJSON||xhr.responseText});\n\t\t\t\t//xhr.responseText\n\t\t\t\t//xhr.responseJSON\n\t\t}\n});
jready     = $(document).ready(function(){\n\t%cursor%\n});
jfun       = $(function(){\n\t%cursor%\n});
# bootbox
dialog     = var $modal = bootbox.dialog({\n\tmessage: "I am a custom dialog",\n\ttitle: "Custom title",\n\tonEscape: function()\n\t{\n\t\t\n\t},\n\tcloseButton: true,\n\tclassName: "my-modal",\n\tbuttons: {\n\t\tsuccess: {\n\t\t\tlabel: "Success!",\n\t\t\tclassName: "btn-success",\n\t\t\tcallback: function()\n\t\t\t{\n\t\t\t\t\n\t\t\t}\n\t\t},\n\t\t"Danger!": {\n\t\t\tclassName: "btn-danger",\n\t\t\tcallback: function()\n\t\t\t{\n\t\t\t\t\n\t\t\t}\n\t\t},\n\t\t"Another label": function()\n\t\t{\n\t\t\t\n\t\t}\n\t}\n});\n
animate    = $("%cursor%").animate({\n\topacity: 0.4,\n\tmarginLeft: "0.6in"\n\t/* other-attr : other-val */\n}, 1500 );
insertbefore= $('<p>Test</p>').insertBefore('%cursor%');
before     = $('%cursor%').before('<p>Test</p>');
insertafter= $('<p>Test</p>').insertAfter('%cursor%');
after      = $('%cursor%').after('<p>Test</p>');
append     = $('%cursor%').append('<p>Test</p>');
appendto   = $('<p>Test</p>').appendTo('%cursor%');
prepend    = $('%cursor%').prepend('<p>Test</p>');
html       = $('%cursor%').html();
text       = $('%cursor%').text();
val        = $('%cursor%').val();
#Events
click      =$("%cursor%").click(function() {\n\t//acción\n});
hover      =$("%cursor%").hover(function () {\n\t/* acciones cuando el mouse esta encima (onHover)*/\n});
hover2     =$("%cursor%").hover(\n\tfunction () {\n\t\t/* acciones onHover */\n\t},\n\tfunction () {\n\t\t/* acciones onBlur */\n\t}\n);
off        =$("%cursor%").off( "click" );
off2       =$("%cursor%").off( "click.espacioNombre", "**" );
off3       =$("%cursor%").off( "click.espacioNombre", "**" );

on=$("%cursor%").on("click", function(e){\n\t//función que se ejecuta sobre click\n});
on2=$("%cursor%").on("click", function(e){\n\t//función que se ejecuta sobre click\n});
on3=$("%cursor%").on({\n\tclick: function(){\n\t\t$(this).toggleClass("active");\n\t},\n\tmouseenter: function(){\n\t\t$(this).addClass("inside");\n\t},\n\tmouseleave: function(){\n\t\t$(this).removeClass("inside");}\n});
on4=function myHandler(event) {\n\talert(event.data.foo);\n}\n\n$("%cursor%").on("click", {foo: "bar"}, myHandler)
ready=$(function() {\n\t// Handler for .ready() called.\n});
toggle=$('%cursor%').toggle(function() {\n\t//Código de la 1ra function}, function() {\n\t//Código de la 1ra function\n});
##Efects.
fadeIn=$('%cursor%').fadeIn('slow');
fadeIn2=$('%cursor%').fadeIn('slow', 300);
fadeIn3=$('%cursor%').fadeIn('slow', function() {\n\t// Animation complete\n});
fadeOut=$('%cursor%').fadeOut('slow');
fadeOut2=$('%cursor%').fadeOut('slow', 300);
fadeOut3=$('%cursor%').fadeOut('slow', function() {\n\t// Animation complete\n});
show=$('%cursor%').show();
show2=$('%cursor%').show('fast');
show3=$('%cursor%').show('slow', function() {\n\t// Animation complete.\n});
hide=$('%cursor%').hide();
hide2=$('%cursor%').hide('fast');
hide3=$('%cursor%').hide('slow', function() {\n\t// Animation complete.\n});
animate=$("%cursor%").animate('width', "500px");
animate2=$("%cursor%").animate({"left": "+=50px"}, "slow");
animate3=$("%cursor%").animate({\n\twidth: "70%",\n\topacity: 0.4,\n\tmarginLeft: "0.6in",\n\tfontSize: "3em",\n\tborderWidth: "10px"\n}, 1500 );
#CSS
css=$('%cursor%').css("color", "red");
css2=$('%cursor%').css({\n\t"width": "+=200",\n\theight: function(index, value) {\n\t\treturn parseFloat(value) * 1.2;\n\t}\n});
#Ajax
ajax =$.ajax({\n\turl: 'ajax/test.html',\n\tsuccess: function(data) {\n\t\tdatos = data;\n\t}\n\terror: function() {\n\t\tdatos = {v1:'valor defecto 1', v2:'valor defecto 2'};\n\t}\n\t}).done(function( msg ) {\n\t\tconsole.log(datos);}\n);
load =$('%cursor%').load('ajax/test.html', function() {\n\talert('Load was performed.');\n});

#gral
each=$.each(map, function(key%cursor%, value) {\n  alert(key + ': ' + value);\n});
#plugin template
plugin=(function($){\n    $.%cursor%yourPluginName = function(el, radius, options){\n        // To avoid scope issues, use 'base' instead of 'this'\n        // to reference this class from internal events and functions.\n        var base = this;\n        \n        // Access to jQuery and DOM versions of element\n        base.$el = $(el);\n        base.el = el;\n        \n        // Add a reverse reference to the DOM object\n        base.$el.data("yourPluginName", base);\n        \n        base.init = function(){\n            if( typeof( radius ) === "undefined" || radius === null ) radius = "20px";\n            \n            base.radius = radius;\n            \n            base.options = $.extend({},$.yourPluginName.defaultOptions, options);\n            \n            // Put your initialization code here\n        };\n        \n        // Sample Function, Uncomment to use\n        // base.functionName = function(paramaters){\n        // \n        // };\n        \n        // Run initializer\n        base.init();\n    };\n    \n    $.yourPluginName.defaultOptions = {\n        radius: "20px"\n    };\n    \n    $.fn.yourPluginName = function(radius, options){\n        return this.each(function(){\n            (new $.yourPluginName(this, radius, options));\n\n		   // HAVE YOUR PLUGIN DO STUFF HERE\n			\n	\n		   // END DOING STUFF\n\n        });\n    };\n    \n})(jQuery);


[Ferite]
iferr   = iferr%block_cursor%fix%block%
monitor = monitor%block_cursor%handle%block%

[Lua]
# by VictorDiaz
for      = for %cursor% do\n\t\nend
while    = while %cursor% do\n\t\nend
repeat   = repeat\n\t\nuntil %cursor%
do       = do\n\t%cursor%\nend
then     = then\n\t%cursor%\nend
else     = else\n\t%cursor%
elif     = else if condition the\n\t%cursor%\nend
if       = if %cursor%condition then\n\t%cursor%\nend
function = function %cursor%(%cursor%)\n\t\nend
line     = --------------------------------------------------------------------------------
local    = local %cursor%var = %cursor%
#~ Löve2D https://love2d.org/
love     = function love.load()\nend\n\nfunction love.update(dt)\nend\n\nfunction love.draw()\nend\n\nfunction love.keypressed(k)\n\tif k == "escape" then\n\t\tlove.event.quit()\n\tend\nend
load     = function love.load(%cursor%)\n\t\nend
update   = function love.update(%cursor%dt)\n\t\nend
draw     = function love.draw(%cursor%)\n\t\nend
title    = love.window.setTitle("%cursor%")
keypressed = function love.keypressed(%cursor%)\n\t\nend
keyboard = function love.keyboard(%cursor%)\n\t\nend

[Sh]
do   = do\n\t%cursor%\ndone
if   = if [ %cursor% ]\nthen\n\t%cursor%\nfi
for  = for %cursor% in %cursor%\ndo\n\t%cursor%\ndone
else=else\n\t%cursor%
case=case %cursor% in \n\t%cursor%)\n\t\t%cursor%\n\t\t;;\n\t%cursor%)\n\t\t%cursor%\n\t\t;;\n\t*)\n\t\t%cursor%\n\t\t;;\nesac\n%cursor%
#~ sh   = #!/bin/sh\n\n
#~ bash = #!/bin/bash\n\n
head=#!/bin/sh\n# -*- coding: utf-8 -*-\n# vim:fileencoding=utf-8\n# Created by {developer}\n# <{mail}>\n# DESCRIPTION\n# Version {date}
hashpling=#!/bin/sh\n
bashhashpling=#!/bin/bash\n
cshhashpling=#!/bin/csh\n
envhashpling=#!/usr/bin/env INTERPRETER\n
utf8=# -*- coding: utf-8 -*-\n# vim:fileencoding=utf-8\n
bash=#!/bin/bash
rmdir=rm -vrd --one-file-system /PATH/*
softlink=ln -vs -t /DESTINATION/PATH /LINK/FILE

[Tcl]
# by Witek Mozga
proc      = proc %cursor% {  } {\n\t\n} ; # end proc
namespace = namespace eval %cursor% {\n\t\n}; # end namespace
expr      = expr { %cursor% }
oo=oo::class create %cursor%  {\n\t\n}; # end class
for     = for {set i 0} {$i < %cursor%} {incr i} {\n\t\n} ; # end for
while   = while { $%cursor% } {\n\t\n} ; # end while
foreach = foreach x $%cursor% {\n\t\n} ; # end foreach
if      = if { $%cursor% } {\n\t\n} ; # end if
else    = else {\n\t\n} ; # end else
elseif  = elseif { $%cursor% } {\n\t\n} ; # end elseif
switch  = switch %cursor% {\n\t\n\tdefault {  }\n} ; # end switch
set     = set %cursor% {  }

[LaTeX]
#misc
includegraph=\\includegraphics[]{%cursor%}
label=\\label{%cursor%}\n
#structure stuff
line=%-----------------------------------------------------------------------
chapter=\\chapter{%cursor%}\\label{chap:}\n
section=\\section{%cursor%}\\label{sec:}\n
subsection=\\subsection{%cursor%}\\label{subsec:}\n
subsubsection=\\subsubsection{%cursor%}\\label{subsubsec:}\n
# environments
itemize=\\begin{itemize}\n%ws%\\item %cursor%\n\\end{itemize}\n
enumerate=\\begin{enumerate}\n%ws%\\item %cursor%\n\\end{enumerate}\n
description=\\begin{description}\n%ws%\\item %cursor%\n\\end{description}\n
figure=\\begin{figure}\n\t\\centering\n\t\includegraphics[]{%cursor%}\n\t\\caption{}\n\t\label{fig:}\n\\end{figure}\n
table=\\begin{table}\n\\centering\n\\begin{tabular}[]{%cursor%}\n\\toprule\n\t\n\\midrule\n\t\n\\bottomrule\n\\end{tabular}\n\\caption{}\n\\label{tab:}\n\end{table}\n
center=\\begin{center}\n\t%cursor%\n\\end{center}\n
#beamer stuff
frame=\\begin{frame}{%cursor%}\n\n\\end{frame}\n
block=\\begin{block}{%cursor%}\n%cursor%\n\\end{block}\n
exbox=\\begin{exbox}{%cursor%}\n\n\\end{exbox}\n
bbox=\\begin{bbox}{%cursor%}\n\n\\end{bbox}\n
alertbbox=\\begin{alertbbox}{%cursor%}\n\n\\end{alertbbox}\n
# math stuff
align=\\begin{align}\n%cursor%\n\\end{align}\n
equation=\\begin{equation}\n%cursor%\n\\end{equation}\n
eqnarray=\\begin{eqnarray}\n%cursor%\n\\end{eqnarray}\n

[Markdown]
# Markdown by Fitorec
ul=\n - item%cursor%1\n - item2\n - item3\n\n
ol=\n 1. item%cursor%1\n 2. item2\n 2. item3\n\n
h1=%cursor%titulo nivel1\n===========================================================================\n
h2=%cursor%titulo nivel2\n---------------------------------------------------------------------------\n
h3=### %cursor%
h4=#### %cursor%
h5=##### %cursor%
h6=###### %cursor%
img=![texto alterno](%cursor%/path/img.png)
link=[contenido del link](%cursor%http://example.com)
code=`%cursor%`
b=**%cursor%**
strong=**%cursor%**
table=<table>\n\t<thead>\n\t\t<tr>\n\t\t\t<th>%cursor%</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr>\n\t\t\t<td>%cursor%</td>\n\t\t</tr>\n\t</tbody>\n</table>
td=<td>%cursor%</td>
tr=<tr>%cursor%</tr>
th=<th>%cursor%</th>
php=```php\n/*PHP Code*/\n```

[ActionScript]
if=if (%cursor%)%block_cursor%
else=else%block_cursor%
for=for (i = 0; i < %cursor%; i++)%block_cursor%
while=while (%cursor%)%block_cursor%
do=do\n{\n\t%cursor%\n} while (%cursor%)\n%cursor%
switch=switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
try=try%block%\ncatch (%cursor%)%block_cursor%

[Arduino]
# by VictorDiaz
void   = void %cursor%(%cursor%)%block_cursor%
setup  = void setup %cursor%(%cursor%)%block_cursor%
loop   = void loop %cursor%(%cursor%)%block_cursor%
if     = if (%cursor%)%block%
else   = else %block%
for    = for (i = 0; i < %cursor%; i++)%block%
while  = while %cursor%(%cursor%)%block%
elseif = if (%cursor%)%block%else %block%
switch = switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%

[Pinguino]
# by VictorDiaz
void   = void %cursor%(%cursor%)%block_cursor%
setup  = void setup %cursor%(%cursor%)%block_cursor%
loop   = void loop %cursor%(%cursor%)%block_cursor%
if     = if (%cursor%)%block%
else   = else %block%
for    = for (i = 0; i < %cursor%; i++)%block%
while  = while %cursor%(%cursor%)%block%
elseif = if (%cursor%)%block%else %block%
switch = switch (%cursor%)%brace_open%case %cursor%:\n\t\t%cursor%\n\t\tbreak;\n\tdefault:\n\t\t%cursor%\n%brace_close%%cursor%
